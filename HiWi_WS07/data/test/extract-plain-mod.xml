<?xml version="1.0" encoding="UTF-8"?>
<!-- Stand 2008-04-04 -->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:tei="http://www.tei-c.org/ns/1.0"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml">

    <xsl:preserve-space elements="*"/>

    <xsl:output indent="yes"/>

    <xsl:variable name="interpunktion">。，、： ？.,:;?!&#10;&#13;「」</xsl:variable>

    <xsl:param name="id"/>

    <xsl:template match="tei:TEI">
        <div class="layout-text" lang="zh">
            <xsl:apply-templates select="tei:text/tei:body/tei:div[@xml:lang = 'zh']"/>
        </div>
    </xsl:template>

    <!-- Templates fuer die Layout-Darstellung -->

    <xsl:template match="tei:note"/>

    <!-- AB 
    //TODO:     ask Wolfgang about iteration possibility-->
    <xsl:template match="tei:space">
        <xsl:if test="@n > 0">
            <span class="honorific">&#x24bd;</span>
        </xsl:if>
        <xsl:if test="@n > 1">
            <span class="honorific">&#x24bd;</span>
        </xsl:if>
        <xsl:if test="@n > 2">
            <span class="honorific">&#x24bd;</span>
        </xsl:if>
        <xsl:if test="@n > 3">
            <span class="honorific">&#x24bd;</span>
        </xsl:if>
        <xsl:if test="@n > 4">
            <span class="honorific">&#x24bd;</span>
        </xsl:if>
        <xsl:if test="@n > 5">
            <span class="honorific">&#x24bd;</span>
        </xsl:if>
        <xsl:if test="@n > 6">
            <span class="honorific">&#x24bd;</span>
        </xsl:if>
        <xsl:if test="@n > 7">
            <span class="honorific">&#x24bd;</span>
        </xsl:if>
        <xsl:if test="@n > 8">
            <span class="honorific">&#x24bd;</span>
        </xsl:if>
        <xsl:if test="@n > 9">
            <span class="honorific">&#x24bd;</span>
        </xsl:if>
        <xsl:if test="@n > 10">
            <span class="honorific">&#x24bd;</span>
        </xsl:if>
    </xsl:template>

    <!-- AB -->
    <xsl:template match="tei:damage">
        <xsl:for-each select="string-to-codepoints(translate(.,$interpunktion,''))">
            <span class="damage">&#x24b9;</span>
        </xsl:for-each>
    </xsl:template>

    <!-- AB -->
    <xsl:template match="tei:choice">
        <choice>
            <xsl:for-each select="tei:unclear">
                <xsl:variable name="cert"><xsl:value-of select="@cert"></xsl:value-of></xsl:variable>
                <variant cert="{$cert}">
                    <xsl:apply-templates/>
                </variant>
            </xsl:for-each>
        </choice>
    </xsl:template>

    <!-- AB -->
    <xsl:template match="tei:app">
        <app>
            <xsl:for-each select="tei:lem">
                <lem>
                    <xsl:apply-templates/>
                </lem>
            </xsl:for-each>
            <xsl:for-each select="tei:rdg">
                <rdg>
                    <xsl:apply-templates/>
                </rdg>
            </xsl:for-each>
        </app>
    </xsl:template>

    <xsl:template match="tei:lb">
        <br/>
    </xsl:template>

    <xsl:template match="tei:persName//text()">
        <xsl:variable name="class">
            <xsl:choose>
                <xsl:when test="ancestor::tei:persName/@type = 'Buddha'">persNameBuddha</xsl:when>
                <xsl:when test="ancestor::tei:persName/@type = ('monk', 'nun')">persNameMonk</xsl:when>
                <xsl:when test="ancestor::tei:persName/starts-with(@type, 'Bodhi')"
                    >persNameBodhisattva</xsl:when>
                <xsl:when test="ancestor::tei:persName/starts-with(@type, 'emp')">persNameEmperor</xsl:when>
                <xsl:when test="ancestor::tei:persName/starts-with(@type, 'disciple')"
                    >persNameDisciple</xsl:when>
            </xsl:choose>
        </xsl:variable>
        <xsl:for-each select="string-to-codepoints(translate(.,$interpunktion,''))">
            <span class="{$class}">
                <xsl:value-of select="codepoints-to-string(.)"/>
            </span>
        </xsl:for-each>
    </xsl:template>

    <xsl:template match="tei:placeName">
        <xsl:for-each select="string-to-codepoints(translate(.,$interpunktion,''))">
            <span class="placeName">
                <xsl:value-of select="codepoints-to-string(.)"/>
            </span>
        </xsl:for-each>
    </xsl:template>

    <xsl:template match="tei:unclear">
        <xsl:for-each select="string-to-codepoints(translate(.,$interpunktion,''))">
            <span class="cell">
                <xsl:value-of select="text()//codepoints-to-string(.)"/>
            </span>
        </xsl:for-each>
    </xsl:template>

    <!--xsl:template match="tei:supplied//text()">
        <xsl:for-each select="string-to-codepoints(translate(.,$interpunktion,''))">
            <span class="supplied">
                <xsl:value-of select="codepoints-to-string(.)"/>
            </span>
        </xsl:for-each>
    </xsl:template-->

    <xsl:template match="element()">
        <xsl:apply-templates/>
    </xsl:template>

    <xsl:template match="text()">
        <xsl:variable name="text" select="string-to-codepoints(translate(.,$interpunktion,''))"/>
        <xsl:for-each select="$text">
            <span class="cell">
                <xsl:value-of select="codepoints-to-string(.)"/>
            </span>
        </xsl:for-each>
    </xsl:template>

</xsl:stylesheet>
